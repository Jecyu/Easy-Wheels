{"version":3,"sources":["webpack://easyWheels/webpack/universalModuleDefinition","webpack://easyWheels/webpack/bootstrap","webpack://easyWheels/./packages/easyTree/src/styles/index.css","webpack://easyWheels/./packages/easyVirtualTree/src/styles/index.css","webpack://easyWheels/./node_modules/css-loader/dist/runtime/api.js","webpack://easyWheels/./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js","webpack://easyWheels/./packages/_utils/base.js","webpack://easyWheels/./packages/easyTree/src/index.js","webpack://easyWheels/./packages/easyTree/src/model/NodeModel.js","webpack://easyWheels/./packages/easyTree/src/model/TreelModel.js","webpack://easyWheels/./packages/easyTree/src/styles/index.css?2373","webpack://easyWheels/./packages/easyTree/src/views/Tree.js","webpack://easyWheels/./packages/easyVirtualTree/src/index.js","webpack://easyWheels/./packages/easyVirtualTree/src/model/NodeModel.js","webpack://easyWheels/./packages/easyVirtualTree/src/model/TreelModel.js","webpack://easyWheels/./packages/easyVirtualTree/src/styles/index.css?883a","webpack://easyWheels/./packages/easyVirtualTree/src/views/Tree.js","webpack://easyWheels/./packages/index.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;QCVA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;AClFA;AACA,kCAAkC,mBAAO,CAAC,8GAAyD;AACnG;AACA;AACA,cAAc,QAAS,SAAS,8BAA8B,GAAG,SAAS,qBAAqB,GAAG;AAClG;AACA;;;;;;;;;;;;ACNA;AACA,kCAAkC,mBAAO,CAAC,8GAAyD;AACnG;AACA;AACA,cAAc,QAAS,6BAA6B,cAAc,eAAe,GAAG,MAAM,qBAAqB,GAAG,sBAAsB,mBAAmB,uBAAuB,GAAG,8BAA8B,uBAAuB,gBAAgB,YAAY,aAAa,WAAW,GAAG,8BAA8B,uBAAuB,YAAY,aAAa,WAAW,GAAG,8BAA8B,GAAG,mCAAmC,0BAA0B,iBAAiB,oBAAoB,GAAG,wCAAwC,uBAAuB,GAAG;AACrkB;AACA;;;;;;;;;;;;;ACNa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;;AAEhB;AACA;AACA;;AAEA;AACA,4CAA4C,qBAAqB;AACjE;;AAEA;AACA,KAAK;AACL,IAAI;AACJ;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,qBAAqB,iBAAiB;AACtC;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,oBAAoB,qBAAqB;AACzC;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,8BAA8B;;AAE9B;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA,CAAC;;;AAGD;AACA;AACA;AACA,qDAAqD,cAAc;AACnE;AACA,C;;;;;;;;;;;;AC7Fa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA,uDAAuD;;AAEvD;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;;AAEA,iBAAiB,wBAAwB;AACzC;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,iBAAiB,iBAAiB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,gBAAgB,KAAwC,GAAG,sBAAiB,GAAG,SAAI;;AAEnF;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA,qEAAqE,qBAAqB,aAAa;;AAEvG;;AAEA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA,yDAAyD;AACzD,GAAG;;AAEH;;;AAGA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA,0BAA0B;AAC1B;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;;AAEA;;AAEA,oBAAoB,6BAA6B;AACjD;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,E;;;;;;;;;;;;AC5QA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,6BAA6B;AAC9C,mBAAmB;AACnB;AACA;AACA;AACA,KAAK;AACL,uCAAuC,oBAAoB;AAC3D;AACA,mBAAmB,6BAA6B;AAChD,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,iDAAiD;AACjD;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,GAAG;AACH;AACA,E;;;;;;;;;;;;AC9EA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACsC;AACvB,qHAAQ,E;;;;;;;;;;;;ACRvB;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe;AACf,gC;AACA;AACA;AACA,qB;AACA;AACA,wB;;AAEA,yBAAyB;AACzB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;;;;;;;;;;;;AC/DA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEoC;AACrB;AACf;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;;AAEA;AACA;AACA,mCAAmC,mBAAmB;AACtD,wCAAwC,qBAAqB;AAC7D,wCAAwC,qBAAqB;AAC7D;AACA;AACA,0CAA0C,uBAAuB;AACjE;AACA,0CAA0C,uBAAuB;AACjE;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,uBAAuB,kDAAS,EAAE,kBAAkB;AACpD;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;ACvEA,UAAU,mBAAO,CAAC,4JAAiF;AACnG,0BAA0B,mBAAO,CAAC,oJAA+D;;AAEjG;;AAEA;AACA,0BAA0B,QAAS;AACnC;;AAEA;;AAEA;AACA;;AAEA;;;;AAIA,sC;;;;;;;;;;;;AClBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAC6B;AAC7B;AAC4C;AAC5C;AACoD;AACpD;;AAEe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,yBAAyB,yDAAS;AAClC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,0BAA0B,uEAAmB,eAAe,OAAO;AACnE;AACA;AACA;AACA;AACA,gDAAgD;AAChD,KAAK;AACL,wDAAwD;;AAExD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,mBAAmB;AAC9B,kCAAkC,OAAO,eAAe,KAAK;AAC7D,qBAAqB,uEAAmB;AACxC,+BAA+B,OAAO;AACtC,mBAAmB,uEAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,OAAO;AACtC,OAAO;AACP,+BAA+B,OAAO;AACtC;AACA;AACA,KAAK;AACL;AACA,6BAA6B,OAAO;AACpC;AACA,oBAAoB,uEAAmB;AACvC,uBAAuB;AACvB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,6BAA6B,OAAO,cAAc;AAClD,kBAAkB,uEAAmB;AACrC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc,UAAU;AACxB;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,QAAQ;AACR,QAAQ;AACR;AACA,6BAA6B,OAAO;AACpC,kBAAkB,uEAAmB;AACrC;AACA,WAAW,SAAS;AACpB;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,mDAAmD;AACnD,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,8CAA8C;;AAE9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,OAAO;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AChNA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAC6C;AAC9B,qHAAe,E;;;;;;;;;;;;ACR9B;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe;AACf,gC;AACA;AACA;AACA,qB;AACA;AACA;AACA,mB;;AAEA,yBAAyB;AACzB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;;;;;;;;;;;;ACnEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEoC;AACrB;AACf;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,uBAAuB,kDAAS,EAAE,kBAAkB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;ACnEA,UAAU,mBAAO,CAAC,4JAAiF;AACnG,0BAA0B,mBAAO,CAAC,2JAA+D;;AAEjG;;AAEA;AACA,0BAA0B,QAAS;AACnC;;AAEA;;AAEA;AACA;;AAEA;;;;AAIA,sC;;;;;;;;;;;;AClBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAC6B;AAC7B;AAC4C;AAC5C;AACoD;AACpD;AACe;AACf;AACA;AACA,iCAAiC;AACjC,0BAA0B;AAC1B,mBAAmB;AACnB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC,+BAA+B;AAC/B,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,yBAAyB,yDAAS;AAClC;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,8EAA8E;AAC9E;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,+BAA+B,uEAAmB;AAClD,qBAAqB,OAAO,mBAAmB,uBAAuB;AACtE;AACA,+BAA+B,uEAAmB;AAClD,qBAAqB,OAAO;AAC5B;AACA,+BAA+B,uEAAmB;AAClD,oBAAoB,OAAO;AAC3B;AACA;AACA;;;AAGA;AACA;AACA,gEAAgE;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD;AACrD,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA,WAAW,mBAAmB;AAC9B,kCAAkC,OAAO,eAAe,KAAK;AAC7D,qBAAqB,uEAAmB;AACxC,+BAA+B,OAAO;AACtC,mBAAmB,uEAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,OAAO;AACtC,OAAO;AACP,+BAA+B,OAAO;AACtC;AACA;AACA,KAAK;AACL;AACA,6BAA6B,OAAO,qDAAqD;AACzF;AACA,oBAAoB,uEAAmB;AACvC,oBAAoB;AACpB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,WAAW,qCAAqC;AAChD,6BAA6B,OAAO,8BAA8B;AAClE,2BAA2B,GAAG,WAAW,wBAAwB,WAAW;AAC5E,kBAAkB,uEAAmB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA,mC;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6EAA6E;AAC7E,wCAAwC;AACxC,uEAAuE,eAAe;;AAEtF;AACA,yEAAyE;AACzE;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACzRA;AAAA;AAAA;AAAA;AAC2C;AACc;AAC1C;AACf,EAAE,qEAAQ;AACV,EAAE,mFAAe;AACjB,CAAC,E","file":"easy-wheels.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"easyWheels\"] = factory();\n\telse\n\t\troot[\"easyWheels\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./packages/index.js\");\n","// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../../../../node_modules/css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.id, \"body {\\n  background: paleturquoise;\\n}\\n/* li {\\n  list-style: none;\\n} */\", \"\"]);\n// Exports\nmodule.exports = exports;\n","// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../../../../node_modules/css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.id, \"*,\\n*::before,\\n*::after {\\n  margin: 0;\\n  padding: 0;\\n}\\nli {\\n  list-style: none;\\n}\\n.easy-virtual-tree {\\n  overflow: auto;\\n  position: relative;\\n}\\n.easy-virtual-tree-phantom {\\n  position: absolute;\\n  z-index: -1;\\n  left: 0;\\n  right: 0;\\n  top: 0;\\n}\\n.easy-virtual-tree-content {\\n  position: absolute;\\n  left: 0;\\n  right: 0;\\n  top: 0;\\n}\\n/* .easy-virtual-tree-node {\\n} */\\n.easy-virtual-tree-node-icon {\\n  display: inline-block;\\n  padding: 6px;\\n  font-size: 12px;\\n}\\n.easy-virtual-tree-node-icon.is-leaf {\\n  color: transparent;\\n}\\n\", \"\"]);\n// Exports\nmodule.exports = exports;\n","\"use strict\";\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\n// css base code, injected by the css-loader\n// eslint-disable-next-line func-names\nmodule.exports = function (useSourceMap) {\n  var list = []; // return the list of modules as css string\n\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = cssWithMappingToString(item, useSourceMap);\n\n      if (item[2]) {\n        return \"@media \".concat(item[2], \" {\").concat(content, \"}\");\n      }\n\n      return content;\n    }).join('');\n  }; // import a list of modules into the list\n  // eslint-disable-next-line func-names\n\n\n  list.i = function (modules, mediaQuery, dedupe) {\n    if (typeof modules === 'string') {\n      // eslint-disable-next-line no-param-reassign\n      modules = [[null, modules, '']];\n    }\n\n    var alreadyImportedModules = {};\n\n    if (dedupe) {\n      for (var i = 0; i < this.length; i++) {\n        // eslint-disable-next-line prefer-destructuring\n        var id = this[i][0];\n\n        if (id != null) {\n          alreadyImportedModules[id] = true;\n        }\n      }\n    }\n\n    for (var _i = 0; _i < modules.length; _i++) {\n      var item = [].concat(modules[_i]);\n\n      if (dedupe && alreadyImportedModules[item[0]]) {\n        // eslint-disable-next-line no-continue\n        continue;\n      }\n\n      if (mediaQuery) {\n        if (!item[2]) {\n          item[2] = mediaQuery;\n        } else {\n          item[2] = \"\".concat(mediaQuery, \" and \").concat(item[2]);\n        }\n      }\n\n      list.push(item);\n    }\n  };\n\n  return list;\n};\n\nfunction cssWithMappingToString(item, useSourceMap) {\n  var content = item[1] || ''; // eslint-disable-next-line prefer-destructuring\n\n  var cssMapping = item[3];\n\n  if (!cssMapping) {\n    return content;\n  }\n\n  if (useSourceMap && typeof btoa === 'function') {\n    var sourceMapping = toComment(cssMapping);\n    var sourceURLs = cssMapping.sources.map(function (source) {\n      return \"/*# sourceURL=\".concat(cssMapping.sourceRoot || '').concat(source, \" */\");\n    });\n    return [content].concat(sourceURLs).concat([sourceMapping]).join('\\n');\n  }\n\n  return [content].join('\\n');\n} // Adapted from convert-source-map (MIT)\n\n\nfunction toComment(sourceMap) {\n  // eslint-disable-next-line no-undef\n  var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));\n  var data = \"sourceMappingURL=data:application/json;charset=utf-8;base64,\".concat(base64);\n  return \"/*# \".concat(data, \" */\");\n}","\"use strict\";\n\nvar isOldIE = function isOldIE() {\n  var memo;\n  return function memorize() {\n    if (typeof memo === 'undefined') {\n      // Test for IE <= 9 as proposed by Browserhacks\n      // @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805\n      // Tests for existence of standard globals is to allow style-loader\n      // to operate correctly into non-standard environments\n      // @see https://github.com/webpack-contrib/style-loader/issues/177\n      memo = Boolean(window && document && document.all && !window.atob);\n    }\n\n    return memo;\n  };\n}();\n\nvar getTarget = function getTarget() {\n  var memo = {};\n  return function memorize(target) {\n    if (typeof memo[target] === 'undefined') {\n      var styleTarget = document.querySelector(target); // Special case to return head of iframe instead of iframe itself\n\n      if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n        try {\n          // This will throw an exception if access to iframe is blocked\n          // due to cross-origin restrictions\n          styleTarget = styleTarget.contentDocument.head;\n        } catch (e) {\n          // istanbul ignore next\n          styleTarget = null;\n        }\n      }\n\n      memo[target] = styleTarget;\n    }\n\n    return memo[target];\n  };\n}();\n\nvar stylesInDom = [];\n\nfunction getIndexByIdentifier(identifier) {\n  var result = -1;\n\n  for (var i = 0; i < stylesInDom.length; i++) {\n    if (stylesInDom[i].identifier === identifier) {\n      result = i;\n      break;\n    }\n  }\n\n  return result;\n}\n\nfunction modulesToDom(list, options) {\n  var idCountMap = {};\n  var identifiers = [];\n\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i];\n    var id = options.base ? item[0] + options.base : item[0];\n    var count = idCountMap[id] || 0;\n    var identifier = \"\".concat(id, \" \").concat(count);\n    idCountMap[id] = count + 1;\n    var index = getIndexByIdentifier(identifier);\n    var obj = {\n      css: item[1],\n      media: item[2],\n      sourceMap: item[3]\n    };\n\n    if (index !== -1) {\n      stylesInDom[index].references++;\n      stylesInDom[index].updater(obj);\n    } else {\n      stylesInDom.push({\n        identifier: identifier,\n        updater: addStyle(obj, options),\n        references: 1\n      });\n    }\n\n    identifiers.push(identifier);\n  }\n\n  return identifiers;\n}\n\nfunction insertStyleElement(options) {\n  var style = document.createElement('style');\n  var attributes = options.attributes || {};\n\n  if (typeof attributes.nonce === 'undefined') {\n    var nonce = typeof __webpack_nonce__ !== 'undefined' ? __webpack_nonce__ : null;\n\n    if (nonce) {\n      attributes.nonce = nonce;\n    }\n  }\n\n  Object.keys(attributes).forEach(function (key) {\n    style.setAttribute(key, attributes[key]);\n  });\n\n  if (typeof options.insert === 'function') {\n    options.insert(style);\n  } else {\n    var target = getTarget(options.insert || 'head');\n\n    if (!target) {\n      throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");\n    }\n\n    target.appendChild(style);\n  }\n\n  return style;\n}\n\nfunction removeStyleElement(style) {\n  // istanbul ignore if\n  if (style.parentNode === null) {\n    return false;\n  }\n\n  style.parentNode.removeChild(style);\n}\n/* istanbul ignore next  */\n\n\nvar replaceText = function replaceText() {\n  var textStore = [];\n  return function replace(index, replacement) {\n    textStore[index] = replacement;\n    return textStore.filter(Boolean).join('\\n');\n  };\n}();\n\nfunction applyToSingletonTag(style, index, remove, obj) {\n  var css = remove ? '' : obj.media ? \"@media \".concat(obj.media, \" {\").concat(obj.css, \"}\") : obj.css; // For old IE\n\n  /* istanbul ignore if  */\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = replaceText(index, css);\n  } else {\n    var cssNode = document.createTextNode(css);\n    var childNodes = style.childNodes;\n\n    if (childNodes[index]) {\n      style.removeChild(childNodes[index]);\n    }\n\n    if (childNodes.length) {\n      style.insertBefore(cssNode, childNodes[index]);\n    } else {\n      style.appendChild(cssNode);\n    }\n  }\n}\n\nfunction applyToTag(style, options, obj) {\n  var css = obj.css;\n  var media = obj.media;\n  var sourceMap = obj.sourceMap;\n\n  if (media) {\n    style.setAttribute('media', media);\n  } else {\n    style.removeAttribute('media');\n  }\n\n  if (sourceMap && btoa) {\n    css += \"\\n/*# sourceMappingURL=data:application/json;base64,\".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), \" */\");\n  } // For old IE\n\n  /* istanbul ignore if  */\n\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    while (style.firstChild) {\n      style.removeChild(style.firstChild);\n    }\n\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nvar singleton = null;\nvar singletonCounter = 0;\n\nfunction addStyle(obj, options) {\n  var style;\n  var update;\n  var remove;\n\n  if (options.singleton) {\n    var styleIndex = singletonCounter++;\n    style = singleton || (singleton = insertStyleElement(options));\n    update = applyToSingletonTag.bind(null, style, styleIndex, false);\n    remove = applyToSingletonTag.bind(null, style, styleIndex, true);\n  } else {\n    style = insertStyleElement(options);\n    update = applyToTag.bind(null, style, options);\n\n    remove = function remove() {\n      removeStyleElement(style);\n    };\n  }\n\n  update(obj);\n  return function updateStyle(newObj) {\n    if (newObj) {\n      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap) {\n        return;\n      }\n\n      update(obj = newObj);\n    } else {\n      remove();\n    }\n  };\n}\n\nmodule.exports = function (list, options) {\n  options = options || {}; // Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n  // tags it will allow on a page\n\n  if (!options.singleton && typeof options.singleton !== 'boolean') {\n    options.singleton = isOldIE();\n  }\n\n  list = list || [];\n  var lastIdentifiers = modulesToDom(list, options);\n  return function update(newList) {\n    newList = newList || [];\n\n    if (Object.prototype.toString.call(newList) !== '[object Array]') {\n      return;\n    }\n\n    for (var i = 0; i < lastIdentifiers.length; i++) {\n      var identifier = lastIdentifiers[i];\n      var index = getIndexByIdentifier(identifier);\n      stylesInDom[index].references--;\n    }\n\n    var newLastIdentifiers = modulesToDom(newList, options);\n\n    for (var _i = 0; _i < lastIdentifiers.length; _i++) {\n      var _identifier = lastIdentifiers[_i];\n\n      var _index = getIndexByIdentifier(_identifier);\n\n      if (stylesInDom[_index].references === 0) {\n        stylesInDom[_index].updater();\n\n        stylesInDom.splice(_index, 1);\n      }\n    }\n\n    lastIdentifiers = newLastIdentifiers;\n  };\n};","/*\n * @Description: \n * @Author: Jecyu\n * @Date: 2020-05-27 15:07:58\n * @LastEditTime: 2020-06-06 12:10:18\n * @LastEditors: Jecyu\n */ \nexport const createDOMFromString = domString => {\n  const div = document.createElement('div');\n  div.innerHTML = domString;\n  return div.childNodes[0];\n};\n\nexport const dataMaker = function(count, nodeKey = \"id\", parentKey = \"pId\") {\n  let nodes = [],\n    min = 10,\n    max = 90,\n    level = 0,\n    curLevel = [],\n    prevLevel = [],\n    levelCount,\n    i = 0,\n    j,\n    k,\n    l,\n    m;\n  while (i < count) {\n    if (level == 0) {\n      levelCount = Math.round(Math.random() * max) + min;\n      for (j = 0; j < levelCount && i < count; j++, i++) {\n        const n = { [nodeKey]: i, [parentKey]: -1, name: \"Big-\" + i };\n        nodes.push(n);\n        curLevel.push(n);\n      }\n    } else {\n      for (l = 0, m = prevLevel.length; l < m && i < count; l++) {\n        levelCount = Math.round(Math.random() * max) + min;\n        for (j = 0; j < levelCount && i < count; j++, i++) {\n          const n = { [nodeKey]: i, [parentKey]: prevLevel[l][nodeKey], name: \"Big-\" + i };\n          nodes.push(n);\n          curLevel.push(n);\n        }\n      }\n    }\n    prevLevel = curLevel;\n    curLevel = [];\n    level++;\n  }\n  return nodes;\n};\n\nexport const buildTree = (\n  tree,\n  childrenKey = \"children\",\n  key = \"nodeKey\",\n  parentKey = \"parent\"\n) => {\n  const n = []; // 添加多一个数组，记录父级\n  const treeMap = {};\n  // 删除 所有 children，传入的值带有 children，以防止孩子重复\n  tree.forEach((node) => {\n    node[childrenKey] && delete node[childrenKey];\n  });\n\n  tree.forEach((node) => (treeMap[node[key]] = node));\n  tree.forEach((node) => {\n    const parent = treeMap[node[parentKey]];\n    // 如果找到索引，那么说明此项不在顶级当中,那么需要把此项添加到它对应的父级中\n    if (parent) {\n      const children = parent[childrenKey] || []; // parent.children ，避免相同值\n      children.push(node);\n      parent[childrenKey] = children;\n    } else {\n      // 如果没有在map中找到对应的索引ID,那么直接把 当前的item添加到 n 结果集中，作为顶级\n      n.push(node);\n    }\n  });\n  return n;\n};","/*\n * @Description: \n * @Author: Jecyu\n * @Date: 2020-06-05 16:02:12\n * @LastEditTime: 2020-06-06 14:30:14\n * @LastEditors: Jecyu\n */ \nimport EasyTree from \"./views/Tree.js\"\nexport default EasyTree;","/*\n * @Description: \n * @Author: Jecyu\n * @Date: 2020-05-27 17:01:38\n * @LastEditTime: 2020-05-28 22:16:34\n * @LastEditors: Jecyu\n*/ \nlet nodeIdSeed = 0;\nexport default class NodeModel {\n  constructor(options, parent) { \n    // data 数据\n    this.id = nodeIdSeed++;\n    this.name = null; \n    this.expand = false;\n    this.visible = true; \n    \n    this.parent = parent; // nodeModel 类型\n    this.children = [] // children data，存放 nodeModel 类型\n\n    // 添加使用者的数据\n    for (let name in options) {\n      if (options.hasOwnProperty(name)) {\n        this[name] = options[name];\n      }\n    }\n  }\n  addChild(value) {\n    if (value instanceof NodeModel) {\n      this.children.push(value);\n    }\n  }\n\n  hasChild() {\n    return this.children.length > 0;\n  }\n\n  getChildNodes() {\n    return this.children;\n  }\n\n  setChildNodesShow(nodeModel) {\n    if (nodeModel.hasChild()) {\n      const children = nodeModel.getChildNodes();\n      children.forEach(item => {\n        if (!item.visible) {\n          item.visible = true;\n        }\n        this.setChildNodesShow(item);\n      });\n    }\n  }\n\n  setChildNodesHide(nodeModel) {\n    if (nodeModel.hasChild()) {\n      const children = nodeModel.getChildNodes();\n      children.forEach(item => {\n        if (item.visible) {\n          item.visible = false;\n        }\n        this.setChildNodesShow(item);\n      });\n    }\n  }\n}\n","/*\n * @Description: 树的根\n * @Author: Jecyu\n * @Date: 2020-05-27 17:01:31\n * @LastEditTime: 2020-05-29 21:57:58\n * @LastEditors: Jecyu\n */\n\nimport NodeModel from \"./NodeModel\";\nexport default class TreeModel {\n  // 每个节点都 new 一个实例对象，可能对性能有影响，但是解耦\n  /**\n   *\n   */\n  constructor(data) {\n    this._roots = []; // 多个根\n    this.nodeModelMap = {}\n    this.initTree(data);\n  }\n\n  initTree(data) {\n    // ✅动态创建\n    // this._root = new NodeModel({ name: \"parent 1\" }, null);\n    // const parent1_1 = new NodeModel({ name: \"parent 1-1\" }, this._root);\n    // const parent1_2 = new NodeModel({ name: \"parent 1-2\" }, this._root);\n    // this._root.addChild(parent1_1);\n    // this._root.addChild(parent1_2);\n    // const parent1_1_1 = new NodeModel({ name: \"parent 1-1-1\" }, parent1_1);\n    // parent1_1.addChild(parent1_1_1);\n    // const parent1_1_2 = new NodeModel({ name: \"parent 1-1-2\" }, parent1_1);\n    // parent1_1.addChild(parent1_1_2);\n    this.convertDataToTree(data, this._roots);\n  }\n\n  /**\n   * 针对多个 root，遍历\n   */\n  convertDataToTree(data, parent) {\n    data.forEach(item => {\n      const node = new NodeModel({ name: item.name }, null);\n      this.nodeModelMap[node.id] = node;\n      parent.push(node);\n      if (item.children && item.children.length) {\n        this.convertDataToTree(item.children, node.children);\n      }\n    })\n  }\n\n  /** \n   * 根据 id 设置节点的显示\n  */\n setChildNodeVisible(id) {\n    // 根据 id 找到 nodeModel\n    const targetNodeModel = this.findNodeModel(id);\n    if (!targetNodeModel) return;\n    // 设置 visible 值\n    if(!targetNodeModel.visible) {\n      targetNodeModel.setChildNodesShow(targetNodeModel);\n    } else {\n      targetNodeModel.setChildNodesHide(targetNodeModel);\n\n    }\n  }\n\n  findNodeModel(id) {\n    return this.nodeModelMap[id];\n  }\n\n  getTreeRoot() {\n    return this._roots;\n  }\n}\n","var api = require(\"!../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../../node_modules/css-loader/dist/cjs.js!./index.css\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","/*\n * @Description:mvc 架构\n * 原型：先渲染树，展开、收缩，后续 checkbox，增删改查、上下移动、拖拽，把数据与视图分离开\n * 思路：\n * 1. view：所有的模版都实现创建，树的容器、树节点\n * <ul class=\"tiny-tree\">\n *  <li class=\"tiny-tree-node\">\n *    <div class=\"tiny-tree-node-content\"></div>\n *    <ul class=\"tiny-tree-node-children\"></ul>  <!-- 孩子节点-->\n *  </li>\n * </ul>\n * initState model 存储数据\n * render view +（包括 bindEvent）\n * 外部 controller 触发事件\n * @Author: Jecyu\n * @Date: 2020-05-26 15:11:24\n * @LastEditTime: 2020-06-06 14:33:59\n * @LastEditors: Jecyu\n */\n\n// 引入样式\nimport \"../styles/index.css\";\n// 引入状态管理\nimport TreeModel from \"../model/TreelModel\";\n// 引入工具类\nimport { createDOMFromString } from \"@/_utils/base\";\nconst prefix = \"easy-tree\";\n\nexport default class EasyTree {\n  constructor(prop) {\n    // 传入配置，初始化\n    this.defaultOpt = {\n      baseNode: null,\n      paddingLeft: 16,\n      data: [],\n    };\n    this.opts = Object.assign(this.defaultOpt, prop);\n    this.init(); // 初始化\n    this.prefix = \"easy\";\n  }\n  init() {\n    this.initState().render();\n  }\n\n  initState() {\n    // 实例化 TreeStore，存储数据\n    this.treeModel = new TreeModel(this.opts.data);\n    this.roots = this.treeModel.getTreeRoot();\n    return this;\n  }\n\n  render() {\n    // 渲染树\n    // <ul class=\"easy-tree\">\n    // new TreeNode() 渲染\n    // </ul>\n    this.treeWrapperDom = createDOMFromString(`<ul class=\"${prefix}\"></ul>`);\n    // const treeNode = new node(this.root).render();\n    this.roots.forEach((nodeModel) => {\n      // 遍历渲染\n      const treeNode = this.renderTreeNode(nodeModel);\n      this.treeWrapperDom.appendChild(treeNode); // 添加进根节点\n    });\n    this.opts.baseNode.appendChild(this.treeWrapperDom); // 渲染完成再添加进 web 浏览器，添加到外部容器\n\n    // 给 ul 容器添加事件，给每个节点分配 id，然后点击事件的时候，通过 id 寻找对应的 nodeData，进行属性值的更改，如 expand、visiable等。\n    this.bindEvent();\n    return this;\n  }\n\n  /**\n   * 渲染节点 name 和 icon\n   */\n  renderSeletor(nodeModel) {\n    const { name, expand, id } = nodeModel;\n    const title = `<span class=\"${prefix}-node-title\">${name}</span>`;\n    const titleDom = createDOMFromString(title);\n    const div = `<div class=\"${prefix}-node-content\"></div>`;\n    const divDom = createDOMFromString(div);\n    let icon = null;\n    // 文件夹和文件显示不同的 icon\n    if (nodeModel.hasChild()) {\n      // 文件夹还需要区分展开和收缩\n      if (expand) {\n        divDom.setAttribute(\"expand\", \"true\");\n        icon = `<span class=\"${prefix}-node-icon iconfont cl-icon-unfold\"></span>`;\n      } else {\n        icon = `<span class=\"${prefix}-node-icon iconfont cl-icon-fold\"></span>`;\n        divDom.setAttribute(\"expand\", \"false\");\n      }\n    } else {\n      // 文件\n      icon = `<span class=\"${prefix}-node-icon\"></span>`;\n    }\n    const iconDom = createDOMFromString(icon);\n    // iconDom.id = id; // 记录 id属性\n    iconDom.setAttribute(\"action\", \"expand\");\n    divDom.appendChild(iconDom);\n    divDom.appendChild(titleDom);\n    return divDom;\n  }\n\n  renderTreeNode(nodeModel) {\n    // 递归渲染\n    // 调用 TreeNode.render() 获得渲染的值\n    // <li>\n    //   <div class=\"easy-tree-node-content\"></div>\n    //   {renderChildren}\n    // </li>\n    const li = `<li class=\"${prefix}-node\"></li>`; // 节点模版\n    const liDom = createDOMFromString(li);\n    const nodeContentDom = this.renderSeletor(nodeModel);\n    liDom.appendChild(nodeContentDom);\n\n    if (nodeModel.hasChild()) {\n      // 递归孩子\n      const nodeModels = nodeModel.getChildNodes();\n      liDom.appendChild(this.renderChildren(nodeModels, nodeModel));\n    }\n    // const { visible } = nodeModel;\n    // if (!visible) {\n    //   // 是否可见，后续再状态同步处理，目前只是抽离 Model 层\n    //   liDom.style.display = \"none\";\n    // } else {\n    //   liDom.style.display = \"block\";\n    // }\n    return liDom;\n  }\n\n  renderChildren(nodeModelList, nodeModel) {\n    // renderTreeNode\n    // <ul class=\"easy-tree-node-children\">\n    // {renderTreeNode}\n    // {renderTreeNode}\n    // </ul>\n    const ul = `<ul class=\"${prefix}-node-children\"></ul>`;\n    const ulDom = createDOMFromString(ul);\n    // 添加 expand attribue 和 显示、隐藏\n    const { expand } = nodeModel;\n    if (expand) {\n      ulDom.style.display = \"block\";\n    } else {\n      ulDom.style.display = \"none\";\n    }\n    nodeModelList.forEach((node) => {\n      ulDom.appendChild(this.renderTreeNode(node)); // 递归渲染\n    });\n    return ulDom;\n  }\n\n  expandCollapseNode(evt) {\n    // const id = evt.target.id;\n    // TODO 后续同步改变 model 状态，然后由数据驱动更新视图，把记录状态从 attribute 抽离出来。\n    // this.treeModel.setChildNodeVisible(id); // 同步子节点的 visible 状态\n\n    // 直接改变 dom 的展开、收缩\n    // 找到当前节点 dom 的父亲的兄弟元素，进行显示处理，这里不得不使用 attribute 同步记录模版状态的管理，这样在渲染的时候也需要记录 expand\n    // attribue 到这样后续维护困难，目前没有用上 model 的状态驱动 view 的展开、收缩更新。\n    const e = evt || window.event;\n    const target = e.target || e.srcElement;\n    if (\n      target.getAttribute(\"action\") &&\n      target.getAttribute(\"action\") === \"expand\"\n    ) {\n      const tagName = target.tagName.toLowerCase();\n      let treeNodeCon = tagName === \"div\" ? target : target.parentNode;\n      if (\n        !treeNodeCon.classList.contains(`${prefix}-node-content`) ||\n        !treeNodeCon.getAttribute(\"expand\")\n      )\n        return;\n      let childrenDom = treeNodeCon.nextElementSibling;\n      if (treeNodeCon.getAttribute(\"expand\") === \"false\") {\n        treeNodeCon.firstChild.classList.remove(\"cl-icon-unfold\");\n        treeNodeCon.setAttribute(\"expand\", \"true\");\n        childrenDom.style.display = \"block\";\n      } else {\n        treeNodeCon.firstChild.classList.add(\"cl-icon-unfold\");\n        childrenDom.style.display = \"none\";\n        treeNodeCon.setAttribute(\"expand\", \"false\");\n      }\n    }\n    // TODO 后续看看是否需要通过 model 改变来更新视图，但是要做好 virtual DOM 优化，当前的基本展开与收缩没必要，后续需要drop、等再考虑\n  }\n\n  bindEvent() {\n    this.treeWrapperDom.addEventListener(\n      \"click\",\n      this.expandCollapseNode.bind(this),\n      false\n    );\n    return this;\n  }\n\n  unbindEvent() {\n    this.treeWrapperDom.removeEventListener(\n      \"click\",\n      this.expandCollapseNode.bind(this),\n      false\n    );\n  }\n\n  destroy() {\n    // 移除树\n    this.opts.baseNode.removeChild(this.treeWrapperDom);\n    // 移除事件监听\n    this.unbindEvent();\n  }\n}\n","/*\n * @Description: \n * @Author: Jecyu\n * @Date: 2020-06-05 16:02:12\n * @LastEditTime: 2020-06-06 14:58:32\n * @LastEditors: Jecyu\n */ \nimport EasyVirtualTree from \"./views/Tree.js\"\nexport default EasyVirtualTree;","/*\n * @Description: \n * @Author: Jecyu\n * @Date: 2020-05-27 17:01:38\n * @LastEditTime: 2020-06-09 16:09:02\n * @LastEditors: Jecyu\n*/ \nlet nodeIdSeed = 0;\nexport default class NodeModel {\n  constructor(options, parent) { \n    // data 数据\n    this.id = nodeIdSeed++;\n    this.name = null; \n    this.expand = false;\n    this.visible = true;\n    this.level = 0; \n    \n    this.parent = parent; // nodeModel 类型\n    this.children = [] // children data，存放 nodeModel 类型\n\n    // 添加使用者的数据\n    for (let name in options) {\n      if (options.hasOwnProperty(name)) {\n        this[name] = options[name];\n      }\n    }\n  }\n  setLevel(level) {\n    this.level = level;\n  }\n  addChild(value) {\n    if (value instanceof NodeModel) {\n      this.children.push(value);\n    }\n  }\n\n  hasChild() {\n    return this.children.length > 0;\n  }\n\n  getChildNodes() {\n    return this.children;\n  }\n\n  setChildNodesShow(nodeModel) {\n    if (nodeModel.hasChild()) {\n      const children = nodeModel.getChildNodes();\n      children.forEach(item => {\n        if (!item.visible) {\n          item.visible = true;\n        }\n        this.setChildNodesShow(item);\n      });\n    }\n  }\n\n  setChildNodesHide(nodeModel) {\n    if (nodeModel.hasChild()) {\n      const children = nodeModel.getChildNodes();\n      children.forEach(item => {\n        if (item.visible) {\n          item.visible = false;\n        }\n        this.setChildNodesShow(item);\n      });\n    }\n  }\n}\n","/*\n * @Description: 树的数据管理\n * @Author: Jecyu\n * @Date: 2020-05-27 17:01:31\n * @LastEditTime: 2020-06-06 17:03:14\n * @LastEditors: Jecyu\n */\n\nimport NodeModel from \"./NodeModel\";\nexport default class TreeModel {\n  constructor(data) {\n    this._root = {\n      id: -1,\n      children: [],\n    }; // 多个根\n    this.nodeModelMap = {};\n    this.flatNodeList = [];\n    this.initTree(data);\n  }\n\n  initTree(data) {\n    // 动态创建\n    this.convertDataToTree(data, this._root);\n  }\n\n  /**\n   * 针对多个 root，遍历\n   */\n  convertDataToTree(data, parent, level = 0) {\n    data.forEach((item) => {\n      const node = new NodeModel({ name: item.name }, parent);\n      parent.children.push(node);\n      node.setLevel(level);\n      this.nodeModelMap[node.id] = node;\n      this.flatNodeList.push(node);\n      if (item.children && item.children.length) {\n        this.convertDataToTree(item.children, node, level + 1);\n      }\n    });\n  }\n\n  /**\n   * 根据 id 设置节点的显示\n   */\n  setChildNodeVisible(id) {\n    // 根据 id 找到 nodeModel\n    const targetNodeModel = this.findNodeModel(id);\n    if (!targetNodeModel) return;\n    // 设置 visible 值\n    if (!targetNodeModel.visible) {\n      targetNodeModel.setChildNodesShow(targetNodeModel);\n    } else {\n      targetNodeModel.setChildNodesHide(targetNodeModel);\n    }\n  }\n\n  findNodeModel(id) {\n    return this.nodeModelMap[id];\n  }\n\n  getTreeRoot() {\n    return this._root.children;\n  }\n\n  getNodeList() {\n    return this.flatNodeList;\n  }\n}\n","var api = require(\"!../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../../node_modules/css-loader/dist/cjs.js!./index.css\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","/*\n * @Description: 虚拟化列表树\n * 原型：先渲染树，展开、收缩\n * 思路：\n * 1. view：所有的模版都实现创建，树的容器、树节点。渲染为一个平级的列表，按照树结构的顺序渲染\n * 2. 每个节点 attribute 上存储 parentNodeKey，点击某个节点时，找到它孩子所有的节点的 parentNodeKye 对比是否相等，进行隐藏和显示。把所有的节点平铺。\n * <div class=\"virtual-tree\">\n *   <div class=virtual-tree-phantom\"></div>\n *   <ul class=\"virtual-tree-content\">\n *     <li class=\"tiny-tree-node\">\n *      <div class=\"tiny-tree-node-content\"></div>\n *    </li>\n *     <li class=\"tiny-tree-node\">\n *      <div class=\"tiny-tree-node-content\"></div>\n *    </li>\n *   </ul>\n * </div>\n * @Author: Jecyu\n * @Date: 2020-05-26 15:11:24\n * @LastEditTime: 2020-06-09 16:47:17\n * @LastEditors: Jecyu\n */\n\n// 引入样式\nimport \"../styles/index.css\";\n// 引入状态管理\nimport TreeModel from \"../model/TreelModel\";\n// 引入工具类\nimport { createDOMFromString } from \"@/_utils/base\";\nconst prefix = \"easy-virtual-tree\";\nexport default class VirtualTree {\n  constructor(props) {\n    // 传入配置，初始化\n    this.refContainerNode = null; // 外部容器节点\n    this.paddingLeft = 16; // 树节点左边距\n    this.data = []; // 传入的树数组数据\n    this.visible = { // 可见数据处理\n      start: 0, // 起始切割点\n      end: 0, // 终点切割点\n      count: 0, // 可见的条数\n      data: [], // 当前可见的数据\n    };\n    this.treeWrapperHeight = 200; // 容器高度\n    this.treePhantomHeight = 0; // 幽灵高度，用于滚动，内容高度\n    this.treeNodeItemHeight = 30; // 节点的高度\n    // dom 引用\n    this.domRefs = {\n      treeWrapper: null,\n      treePhantom: null,\n      treeContent: null,\n    };\n    // 添加使用者的数据\n    for (let name in props) {\n      if (props.hasOwnProperty(name)) {\n        this[name] = props[name];\n      }\n    }\n    this.roots = [];\n    this.nodeModelList = []; // 总数据\n    this.init(); // 初始化\n  }\n  init() {\n    this.initState()\n      .render()\n      .bindEvent();\n  }\n\n  initState() {\n    // 实例化 TreeStore，存储数据\n    this.treeModel = new TreeModel(this.data);\n    this.roots = this.treeModel.getTreeRoot();\n    this.nodeModelList = this.treeModel.getNodeList();\n    return this;\n  }\n\n  /**\n   * @description: 获得渲染的数据\n   * @param {type}\n   * @return:\n   */\n  getVisibleData(el, start = 0) {\n    this.visible.start = start;\n    this.visible.count = Math.ceil(el.clientHeight / this.treeNodeItemHeight); // 向上取整\n    this.visible.end = this.visible.start + this.visible.count;\n    const visibleData = this.nodeModelList.slice(\n      this.visible.start,\n      this.visible.end\n    );\n\n    return visibleData;\n  }\n\n  render() {\n    // 渲染树\n    this.domRefs.treeWrapper = createDOMFromString(\n      `<div class=\"${prefix}\" style=\"height: ${this.treeWrapperHeight}px\"></div>`\n    );\n    this.domRefs.treePhantom = createDOMFromString(\n      `<div class=\"${prefix}-phantom\"></div>`\n    );\n    this.domRefs.treeContent = createDOMFromString(\n      `<ul class=\"${prefix}-content\"></ul>`\n    );\n    this.domRefs.treePhantom.style.height =\n      this.nodeModelList.length * this.treeNodeItemHeight + \"px\";\n      \n\n    this.domRefs.treeWrapper.appendChild(this.domRefs.treePhantom);\n    this.domRefs.treeWrapper.appendChild(this.domRefs.treeContent);\n    this.refContainerNode.appendChild(this.domRefs.treeWrapper); // 渲染完成再添加进 web 浏览器，添加到外部容器\n    this.visible.data = this.getVisibleData(\n      this.domRefs.treeWrapper,\n      this.visible.start\n    );\n    this.renderNodeList();\n    return this;\n  }\n  renderNodeList() {\n    this.domRefs.treeContent.innerHTML = \"\";\n    this.visible.data.forEach((nodeModel) => {\n      // 遍历渲染\n      const treeNode = this.renderTreeNode(nodeModel);\n      this.domRefs.treeContent.appendChild(treeNode); // 添加进根节点\n    });\n  }\n\n  /**\n   * 渲染节点 name 和 icon\n   */\n  renderSeletor(nodeModel) {\n    const { name, expand, id } = nodeModel;\n    const title = `<span class=\"${prefix}-node-title\">${name}</span>`;\n    const titleDom = createDOMFromString(title);\n    const div = `<div class=\"${prefix}-node-content\"></div>`;\n    const divDom = createDOMFromString(div);\n    let icon = null;\n    // 文件夹和文件显示不同的 icon\n    if (nodeModel.hasChild()) {\n      // 文件夹还需要区分展开和收缩\n      if (expand) {\n        divDom.setAttribute(\"expand\", \"true\");\n        icon = `<span class=\"${prefix}-node-icon iconfont cl-icon-unfold\"></span>`;\n      } else {\n        icon = `<span class=\"${prefix}-node-icon iconfont cl-icon-fold\"></span>`;\n        divDom.setAttribute(\"expand\", \"false\");\n      }\n    } else {\n      // 文件\n      icon = `<span class=\"${prefix}-node-icon iconfont cl-icon-unfold is-leaf\"></span>`; // 这里 iconfont 也要设置，然后处理 color 为 transparent，避免 padding-left 不一致\n    }\n    const iconDom = createDOMFromString(icon);\n    iconDom.id = id; // 记录 id属性\n    iconDom.setAttribute(\"action\", \"expand\");\n    divDom.appendChild(iconDom);\n    divDom.appendChild(titleDom);\n    return divDom;\n  }\n\n  /**\n   * @description: 渲染节点\n   * @param {type}\n   * @return:\n   */\n  renderTreeNode(nodeModel) {\n    const { level, expand, visible, parent, id } = nodeModel;\n    const li = `<li class=\"${prefix}-node\" style=\"padding-left: ${this\n      .paddingLeft * level}px; height: ${this.treeNodeItemHeight}px\"></li>`; // 节点模版\n    const liDom = createDOMFromString(li);\n    liDom.setAttribute(\"pId\", parent.id);\n    liDom.setAttribute(\"id\", id);\n    const nodeContentDom = this.renderSeletor(nodeModel);\n    liDom.appendChild(nodeContentDom);\n    if (!visible) {\n      // 是否可见\n      liDom.style.display = \"none\"; \n    } else {\n      liDom.style.display = \"block\";\n    }\n    if (nodeModel.hasChild()) {\n      if (expand) {\n        // showChildren\n        nodeModel.setChildNodesShow(nodeModel);\n      } else {\n        // hideChildren\n        nodeModel.setChildNodesHide(nodeModel);\n      }\n    }\n    return liDom;\n  }\n\n  /**\n   * @description: 展开、收缩节点\n   * TODO后续由数据驱动更新视图，把展开、折叠视图状态从 attribute 抽离出来。\n   * expandCollapseNodeChildren\n   * node.parent => parent.id === id ===> display hide\n   * @param {type}\n   * @return:\n   */\n  expandCollapseNode(evt) {\n    const e = evt || window.event;\n    const target = e.target || e.srcElement;\n    const id = target.id;\n    const nodeList = Array.from(this.domRefs.treeContent.childNodes);\n    if (\n      target.getAttribute(\"action\") &&\n      target.getAttribute(\"action\") === \"expand\"\n    ) {\n      const tagName = target.tagName.toLowerCase();\n      let treeNodeCon = tagName === \"div\" ? target : target.parentNode;\n      const nodeModel = this.treeModel.findNodeModel(id);\n      if (treeNodeCon.getAttribute(\"expand\") === \"false\") {\n        treeNodeCon.firstChild.classList.remove(\"cl-icon-unfold\");\n        treeNodeCon.firstChild.classList.add(\"cl-icon-fold\");\n        treeNodeCon.setAttribute(\"expand\", \"true\");\n        // 同步状态\n        nodeModel.expand = true;\n        nodeModel.setChildNodesShow(nodeModel);\n        // showChildrenNode\n        nodeList.forEach((item) => {\n          if (item.getAttribute(\"pId\") === id) {\n            item.style.display = \"block\";\n          }\n        });\n      } else {\n        // hideChildrenNode\n        // 同步状态\n        nodeModel.expand = false;\n        nodeModel.setChildNodesHide(nodeModel);\n        nodeList.forEach((item) => {\n          if (item.getAttribute(\"pId\") === id) {\n            item.style.display = \"none\";\n          }\n        });\n        treeNodeCon.firstChild.classList.add(\"cl-icon-unfold\");\n        treeNodeCon.firstChild.classList.remove(\"cl-icon-fold\");\n        treeNodeCon.setAttribute(\"expand\", \"false\");\n      }\n    }\n  }\n  handleScroll(e) {\n    const target = e.target || e.srcElement;\n    const scrollTop = target.scrollTop;\n    // 减去整除 itemHeigt 多出来的距离，得到整倍数，并进行 transformY 移动，使listViewContentDom容器的位置回到可见区域（因为滚动导致）\n    const fixedScrollTop = scrollTop - (scrollTop % this.treeNodeItemHeight); // 跟下面的 start 求值做对应处理，因此只需要移动整倍数。\n    // const fixedScrollTop = scrollTop; // 直接采用这个的话，拖到底部后会出现页面抖动现象。\n    this.domRefs.treeContent.style.webkitTransform = `translate3d(0, ${fixedScrollTop}px, 0)`;\n\n    // 改变要渲染的数据\n    this.visible.start = Math.floor(scrollTop / this.treeNodeItemHeight); // 起点数据不会计算上余数，因此不会多请求额外的数据，保证整个容器高度容纳了所有显示的数据。\n    this.visible.data = this.getVisibleData(target, this.visible.start);\n    this.renderNodeList();\n  }\n\n  bindEvent() {\n    this.domRefs.treeContent.addEventListener(\n      \"click\",\n      this.expandCollapseNode.bind(this),\n      false\n    );\n    this.domRefs.treeWrapper.addEventListener(\n      \"scroll\",\n      this.handleScroll.bind(this),\n      false\n    );\n    return this;\n  }\n\n  unbindEvent() {\n    this.domRefs.treeContent.removeEventListener(\n      \"click\",\n      this.expandCollapseNode.bind(this),\n      false\n    );\n  }\n\n  destroy() {\n    // 移除树\n    this.refContainerNode.removeChild(this.domRefs.treeContent);\n    // 移除事件监听\n    this.unbindEvent();\n  }\n}\n","// TODO 自动化读入文件夹\nimport EasyTree from \"./easyTree/src/index\"\nimport EasyVirtualTree from \"@/easyVirtualTree/src/index\"\nexport default {\n  EasyTree,\n  EasyVirtualTree,\n};"],"sourceRoot":""}